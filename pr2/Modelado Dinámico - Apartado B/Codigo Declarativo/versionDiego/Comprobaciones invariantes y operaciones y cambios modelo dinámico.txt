Derivado1: kmRcorridos, clase Coche  => CHECK

Para comprobar que el derivado kmRecorridos funciona correctamente se ha desarrollado el archivo p2Derivado1.soil.
Sequencia de operaciones:

-!Coche1.iniciarViaje(Recorrido1)
Se crea Viaje1 que relaciona el Recorrido 3 y el Coche. El valor de la velocidad del coche sigue en cero, dado que no ha partido
-!Coche1.acelerar(5)
El coche gana 5 km/dia de velocidad
-!Coche1.avanzar()
El coche avanza 5 km en el Viaje uno. Se actualizan los valores de kmViaje y kmRecorridos
- !Coche1.acelerar(5)
El coche gana otros 5 kms de velocidad
-!Coche1.acelerar(400)
El valor del atributo velocidad en el coche aumenta 400
-!Coche1.avanzar()
El coche avanza y llega hasta la ciudad destino. El objeto Coche1 forma parte de la relación estaEn, junto con la Ciudad2. KmRecorridos se iguala a la distancia del recorrido. Finalmente, la velocidad se pone a cerodado que el coche deja de realizar.

Se repite la misma sequencia de acciones tanto para el Recorrido2 como para el Recorrido3.

Al final el valor de kmRecorridos se iguala a 1200 que coincide con la suma de las distancias de todos los recorridos que ha atravesado el coche.

Derivado2: necesitaMantenimiento, clase Coche  

Para comprobar que el derivado necesitaMantenimiento funciona de forma correcta se ha procedido a crear varios archivos .soil para comprobar que el atributo se comporta correctamente en las siguientes situaciones:

- No han pasado 4 años desde la fecha de matriculación : CHECK (p2Drivado2_1.soil)
- No han pasado 4 años y ha realizado alguna revisión en un taller oficial: CHECK(p2Derivado2_2.soil)
- Han pasado más de 4 años desde la matriculación, se ha realizado una revisión en un taller oficial, pero ha pasado más de 1 año: CHECK(p2Derivado2_3.soil)
- Han pasado más de 4 años desde la matriculación, se ha realizado una revisión en un taller oficial y no ha pasado más de 1 año: CHECK(p2Derivado2_4.soil)
- Han pasado más de 4 años desde la matriculación y se ha realizado una revisión en un taller no oficial: CHECK(p2Derivado2_5.soil)

Derivado3: enGarantia, clase Coche  

Para comprobar que el derivado enGarantia funciona de forma correcta se ha procedido a crear varios archivos .soil para comprobar que el atributo se comporta correctamente en las siguientes situaciones:

- No han pasado 4 años desde la fecha de matriculación y el atributo enGarantía debería estar en true :CHECK (p2Drivado3_1.soil)
- Han pasado 4 años desde la fecha de matriculación y no se ha realizado ninguna revision, el atributo de enGarantia debería estar en false :CHECK (p2Drivado3_2.soil)

Derivado4: validezDeGarantia, clase Coche

Se han comprobado las siguientes situaciones

- No han pasado 4 años desde la fecha de matriculación y el atributo de validezDeGrantia debería valer 400 dado que el coche está en garantía durante primeros 400 días desde la fecha de su matriculación  :CHECK (p2Drivado4_1.soil)
- Han pasado 4 años desde la fecha de matriculación. El atributo validezDeGarantia debería guardar 0: CHECK(p2Derivado4_2.soil)  
- Han pasado 4 años desde la fecha de matriculación y se ha realizado una revisión en un taller oficial. El atributo validezDeGarantia debería guardar la garantía que ofrece el taller: CHECK(p2Derivado4_3.soil)
- Han pasado 4 años desde la fecha de matriculación y se ha realizado una revisión en un taller NO oficial. El atributo validezDeGarantia debería guardar 0: CHECK(p2Derivado4_4.soil)  




Inviariantes:
#context Recorrido
    inv minimo5Km --> CHECK
	--He generado una recorrido entre Ciudad2 y Ciudad2 de menos de 5km, y da error, mientras que los otros dos reccoridos funcionan bien.

#context Coche
    inv revisionDespuesdeMatriculacion --> CHECK
--Creo un tallerNoOficial y una revision en la ciudad del coche 3 y lo someto a una revisión antes de su matriculación y da false la constraint mientras que para el resto de valores válidos funciona
	

	inv revisadoUnaVez --> CHECK

--He añadido que no pueda haber dos en curso a la restricción para el dinámico
Revision 1 y 2 se solapan con inicios y finales distintos y lo detecta
Revision 1 y 2 se solapan con incios iguales y lo detecta
Revision 1 y 2 se solapan con incios distintos y mismo final y lo detecta
Revision 1 y 2 se solapan al estar en curso (ambos finales null)
#context Revision
    inv mismaCiudadqueTallerEnRevision -->CHECK

--Cuando una revisión está en curso, es necesario que el coche se encuentre en la misma ciudad que su taller
Creo una revision en la misma ciudad que el coche y da true
Creo una nueva ciudad y hago que la revisión en curso no esté en el taller y lo detecta

#context Viaje
    inv viajandoOenCiudad--> CHECK
Si el coche está viajando no está en una ciudad
Creo un viaje no terminado y pongo el coche en una ciudad y lo detecta
Hago que el coche deje de estar en la ciudad y da true

#context Coche
    inv enCiudadDestino--> CHECK

--Hago que el coche1 viaje a Ciudad 1 desde Ciudad 2 y se encuentre alli y da true
--Hago que el coche1 viaje a Ciudad 1 desde Ciudad 2 y se encuentre en Ciudad 2 y da false

#context Coche
    inv viajeUnico--> CHECK
--He añadido que no pueda haber dos en curso a la restricción para el dinámico
Dos viajes solapados en inicio da false
Dos viajes solapados con inicio y fin distintos da false
Dos viajes solapados con incio distinto y fin igual da false
Dos viajes solapados por estar en curso, fin a null
	inv destinoComoOrigen-->

#context Ciudad
    inv hayRecorridos-->
- Hago que solo haya un recorrido entre dos ciudades da false
-Hago que no haya recorridos entre dos ciudades
- Hago que hayan 2
#context Coche
    inv empiezaViajeEnOrigen-->

	inv viajeDespuesdeMatriculacion-->

Operaciones:
inciarViaje(recorrido : Recorrido) -> Funciona
avanzar() -> Funciona
decelerar() -> Funciona
--Se ha verificado el comportamiento definiendo una velocidad y haciendo que el coche llegue al destino.

Al tener un viaje en curso el atributo derivado de los km realizados por el coche debe ser la suma de los recorridos de los viajes terminados más los que lleve recorridos del el viaje en curso, si lo hubiera.



