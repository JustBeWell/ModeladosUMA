--=============================================================================
--                                  MODELO
--=============================================================================

model practica2 -- Sistema de Coches

--=============================================================================
--                                  ENUMERADOR
--=============================================================================
enum TipoRevision{Mantenimiento, Reparacion}


--=============================================================================
--                                 CLASES
--=============================================================================

class Coche < ActiveObject
    attributes
        Id : Integer
        kmRecorridos: Real derive:
            self.viaje.recorrido -> collect(rs | rs.distancia) -> sum()
        fechaMatriculacion: Integer
        necesitaMantenimiento: Boolean derive:
            not (fechaMatriculacion < 400)  or ((self.clock -> asOrderedSet() -> first()).NOW - (self.revision ->collect(r | r.fechaFin) -> max())) < 100
        enGarantia: Boolean derive:
            fechaMatriculacion < 400 or self.revision -> exists(rev | rev.oficial and ((self.clock -> asOrderedSet() -> first()).NOW - rev.fechaFin) < rev.oficial.garantia)
        validezDeGarantia: Integer derive:
            self.revision.oficial -> collect(t | t.garantia) -> max() --fechaActual
end

class Viaje
    attributes
        fechaSalida : Integer
        fechaLlegada: Integer
        
end

class Ciudad
    attributes
        nombre: String
end

class Taller
    attributes
        nombre: String
end

class Oficial < Taller
    attributes
        garantia: Integer
end 

class NoOficial < Taller
end

class Revision
attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipo : TipoRevision
end

class Clock
  attributes
    NOW : Integer init = 0 -- POSIX representation starting at 0
    resolution: Integer init = 1
end

class ActiveObject
operations
  tick()
    begin
    end
end

--=============================================================================
--                            CLASES DE ASOCIACIÓN
--=============================================================================

associationclass Recorrido between
    Ciudad [1] role origen
    Ciudad [1..*] role destino
    attributes
        distancia : Real
end


--=============================================================================
--                               RELACIONES
--=============================================================================

-- Relaciones de la clase Coche

association esta_en between
    Coche [0..*] role coche
    Ciudad [0..1] role ciudad
end

association se_somete between
    Coche [1] role necesita
    Revision [0..*] role revision
end

association realiza_viaje between
    Coche [1] role coche
    Viaje [0..*] role viaje
end

-- Relaciones de la clase Revision

composition se_realiza_oficial between
    Oficial [1] role oficial
    Revision [0..*] role revision
end

composition se_realiza_no_oficial between
    NoOficial [1] role no_oficial
    Revision [0..*] role revision
end

-- Relaciones de la clases Oficial y NoOficial

composition existe_en between
    Ciudad [1] role ciudad
    Oficial [0..1] role tallerOficial
end

composition puede_existir between
    Ciudad [1] role ciudad
    NoOficial [0..*] role tallerNoOficial
end

-- Relaciones de la clase Viaje

association realiza between
    Viaje [1..*] role viaje
    Recorrido [1..*] role recorrido
end

--Relaciones de la clase ActiveObject

association Time between
    Clock [1] role clock
    ActiveObject [0..*] role ao
end 


--=============================================================================
--                              INVARIANTES
--=============================================================================
constraints
-- Invariante 1: Cada cuidad debe tener una distancia minima de 5 km de la otra.
context Recorrido
    inv minimo5Km:
    self.distancia >= 5

-- Invariante 2: Cada coche debe de pasar revision despues de matricularse y no antes.
context Coche
    inv revisionDespuesdeMatriculacion:
    self.revision -> forAll(rev | rev.fechaInicio >= self.fechaMatriculacion)

-- Invariante 3: Todos los coches han de ser revisado como maximo en un momento dado.
    inv revisadoUnaVez:
    self.revision -> forAll(rev1, rev2 | rev1.fechaInicio <> rev2.fechaInicio or rev1.fechaInicio >= rev2.fechaFin or rev2.fechaInicio >= rev1.fechaFin)

-- Invariante 4: Si un coche esta en revision, debe de estar en la misma ciudad que el taller.
    inv mismaCiudadqueTallerEnRevision:
    self.necesitaMantenimiento implies self.revision -> exists(t1 | t1.oficial.ciudad = self.ciudad or t1.no_oficial.ciudad = self.ciudad)

-- Invariante 5: Un coche tiene que estar o viajando o en una ciudad.
    inv viajandoOenCiudad:
    if self.viaje -> size() > 0 then self.ciudad -> size() = 1
    else self.ciudad.oclIsUndefined()
    endif

-- V2:
-- inv viajandoOenCiudad:
--    if self.viaje -> exists(v | v.fechLlegada = 0) then self.ciudad.oclIsUndefined()
--    else self.ciudad -> size() = 1
--    endif
--    Si un viaje no tiene la fecha de llegada esta está a 0    

-- Invariante 6: Un coche después de su viaje tiene que encontrarse en su ciudad destino.
context Viaje
    inv enCiudadDestino:
    self.recorrido -> exists(r | r.destino -> asOrderedSet() -> includes(self.coche.ciudad -> asOrderedSet() -> first()))

-- Invariante 7: No pueden haber dos viajes solapados.
context Coche
    inv viajeUnico:
    self.viaje -> forAll(v1,v2 | v1.fechaSalida <> v2.fechaSalida and (v1.fechaLlegada <= v2.fechaSalida or v2.fechaLlegada <= v1.fechaSalida))

-- Invariante 8: Un coche debe de empezar el siguiente viaje en la ciudad destino del anterior.
    inv destinoComoOrigen:
    let viajesOrdenados : OrderedSet(Viaje)  = self.viaje -> sortedBy(v | v.fechaSalida) in 
    viajesOrdenados -> forAll(v1, v2 | viajesOrdenados->indexOf(v1) = viajesOrdenados->indexOf(v2) + 1 implies v1.recorrido.destino 
    -> asOrderedSet()-> last() = v2.recorrido.origen -> asOrderedSet()-> first())

-- Invariante 9: Un coche esta en garantia si no pasaron 4 años desde su matriculacion.
    inv enGarantiaMatriculacion:
    self.enGarantia implies self.fechaMatriculacion < 400

-- Invariante 10: Un coche esta en garantia si no han pasado los dias indicados en la garantia de un taller oficial donde el coche tuvo una revision.
    inv enGarantiaRevision:
    self.enGarantia implies self.revision -> exists(rev | rev.oficial and ( (self.clock -> asOrderedSet() -> first()).NOW - rev.fechaFin) < rev.oficial.garantia)

-- Invariante 11: .- Durante los primeros cuatro años desde la fecha de matriculación, un coche no necesita mantenimiento. 
--Después de ese tiempo, un coche no necesita mantenimiento hasta pasado un año de la última revisión de mantenimiento que tuviera, sin importar el taller donde se realizó
context Ciudad
    inv hayRecorridos:
    not self.origen.oclIsUndefined() implies self.destino -> size() > 0

    --=============================================================================
--                              DUDAS
--=============================================================================

